import telebot
import threading
import time
from datetime import datetime, timedelta
import os
import json

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)

# ======== –•—Ä–∞–Ω–∏–ª–∏—â–µ ========
events = {}
groups = {}  # {"–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã": ["@user1", "@user2"]}

GROUPS_FILE = "groups.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø –∏–∑ —Ñ–∞–π–ª–∞
if os.path.exists(GROUPS_FILE):
    with open(GROUPS_FILE, "r", encoding="utf-8") as f:
        groups = json.load(f)

def save_groups():
    with open(GROUPS_FILE, "w", encoding="utf-8") as f:
        json.dump(groups, f, ensure_ascii=False, indent=2)

# ======== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ========
STANDARD_ALERTS = [10, 60, 300, 720, 1440]  # –º–∏–Ω: 10–º–∏–Ω,1—á,5—á,12—á,24—á

# ======== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π ========
def check_events():
    while True:
        now = datetime.utcnow()  # UTC
        for name, data in list(events.items()):
            event_time = data["time"]
            chat_id = data["chat_id"]
            notified = data["notified"]
            members = data.get("members", [])

            # –°–æ–±—ã—Ç–∏–µ –±–æ–ª–µ–µ —Å—É—Ç–æ–∫ –≤–ø–µ—Ä–µ–¥
            delta_total = (event_time - now).total_seconds() / 60
            if delta_total > 1440:
                if "days" not in notified:
                    days_left = int(delta_total // 1440)
                    bot.send_message(chat_id, f"üìÖ –°–æ–±—ã—Ç–∏–µ '{name}' —Å—Ç–∞—Ä—Ç—É–µ—Ç —á–µ—Ä–µ–∑ {days_left} –¥–Ω. –í {(event_time + timedelta(hours=3)).strftime('%H:%M')} –ú–°–ö!")
                    notified.add("days")
                continue

            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for minutes_before in STANDARD_ALERTS:
                key = f"{minutes_before}m"
                if minutes_before > delta_total:
                    continue
                if key not in notified:
                    if minutes_before >= 60:
                        hours = minutes_before // 60
                        msg = f"‚è≥ –î–æ '{name}' –æ—Å—Ç–∞–ª–æ—Å—å {hours} —á–∞—Å(–∞/–æ–≤)! –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å!"
                    else:
                        msg = f"‚öîÔ∏è –î–æ '{name}' –æ—Å—Ç–∞–ª–æ—Å—å {minutes_before} –º–∏–Ω—É—Ç!"
                    member_str = " ".join(members) if members else ""
                    bot.send_message(chat_id, f"{msg} {member_str}")
                    notified.add(key)

            # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å–æ–±—ã—Ç–∏—è
            if event_time <= now < event_time + timedelta(minutes=1) and "start" not in notified:
                member_str = " ".join(members) if members else ""
                bot.send_message(chat_id, f"üî• '{name}' –ù–ê–ß–ê–õ–°–Ø! {member_str}")
                notified.add("start")

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π
            if now > event_time + timedelta(hours=2):
                del events[name]

        time.sleep(30)

threading.Thread(target=check_events, daemon=True).start()

# ======== –ö–æ–º–∞–Ω–¥—ã ========
# –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É
@bot.message_handler(commands=['—Å–æ–∑–¥–∞—Ç—å_–≥—Ä—É–ø–ø—É'])
def create_group(message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        bot.reply_to(message, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /—Å–æ–∑–¥–∞—Ç—å_–≥—Ä—É–ø–ø—É <–Ω–∞–∑–≤–∞–Ω–∏–µ> <@—É—á–∞—Å—Ç–Ω–∏–∫1 @—É—á–∞—Å—Ç–Ω–∏–∫2 ...>")
        return
    name = parts[1].lower()
    members = parts[2].split()
    groups[name] = members
    save_groups()
    bot.reply_to(message, f"‚úÖ –ì—Ä—É–ø–ø–∞ '{name}' —Å–æ–∑–¥–∞–Ω–∞: {' '.join(members)}")

# –°–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç —Å —É—á–µ—Ç–æ–º –ú–°–ö
@bot.message_handler(commands=['—Å–æ–∑–¥–∞—Ç—å_–∏–≤–µ–Ω—Ç'])
def create_event(message):
    try:
        parts = message.text.split()
        if len(parts) < 5:
            bot.reply_to(message, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /—Å–æ–∑–¥–∞—Ç—å_–∏–≤–µ–Ω—Ç <–Ω–∞–∑–≤–∞–Ω–∏–µ> <YYYY-MM-DD> <HH:MM> <—É—á–∞—Å—Ç–Ω–∏–∫–∏/–≥—Ä—É–ø–ø—ã/—Å–ª–æ–≤–æ '–≤—Å–µ'>")
            return
        name = parts[1].lower()
        date_str, time_str = parts[2], parts[3]
        raw_members = parts[4:]

        # –í–≤–æ–¥–∏–º –ú–°–ö, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        msk_time = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
        event_time = msk_time - timedelta(hours=3)  # –ú–°–ö ‚Üí UTC

        final_members = []
        for m in raw_members:
            if m.lower() == "–≤—Å–µ":
                final_members = []
                break
            elif m.lower() in groups:
                final_members.extend(groups[m.lower()])
            else:
                final_members.append(m)

        events[name] = {"time": event_time, "chat_id": message.chat.id, "notified": set(), "members": final_members}
        bot.reply_to(message, f"‚úÖ –ò–≤–µ–Ω—Ç '{name}' —Å–æ–∑–¥–∞–Ω –Ω–∞ {msk_time.strftime('%d.%m.%Y %H:%M')} –ú–°–ö\n–£—á–∞—Å—Ç–Ω–∏–∫–∏: {' '.join(final_members) if final_members else '–í—Å–µ'}")
    except ValueError:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä: /—Å–æ–∑–¥–∞—Ç—å_–∏–≤–µ–Ω—Ç —Ä–µ–π–¥ 2025-10-10 20:00 @user1 @user2")

# –ö–æ–º–∞–Ω–¥–∞ —Å–æ–∑—ã–≤ –¥–ª—è –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
@bot.message_handler(commands=['—Å–æ–∑—ã–≤'])
def general_call(message):
    chat_id = message.chat.id
    all_members = []
    for members in groups.values():
        all_members.extend(members)
    member_str = ' '.join(all_members)
    if member_str:
        bot.send_message(chat_id, f"‚öîÔ∏è –û–±—â–∏–π —Å–±–æ—Ä! {member_str}, –≤—Å–µ –∫ —Å—Ç–∞—Ä—Ç—É! ‚è≥")
    else:
        bot.send_message(chat_id, "‚ö†Ô∏è –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±—â–µ–≥–æ —Å–±–æ—Ä–∞.")

# –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
@bot.message_handler(commands=['–∏–≤–µ–Ω—Ç—ã'])
def list_events(message):
    if not events:
        bot.reply_to(message, "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤.")
        return
    text = "üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã:\n"
    for name, data in events.items():
        text += f"‚Ä¢ {name} ‚Äî {(data['time'] + timedelta(hours=3)).strftime('%d.%m.%Y %H:%M')} –ú–°–ö\n"
    bot.reply_to(message, text)

# –û—Ç–º–µ–Ω–∞ —Å–æ–±—ã—Ç–∏—è
@bot.message_handler(commands=['–æ—Ç–º–µ–Ω–∏—Ç—å_–∏–≤–µ–Ω—Ç'])
def cancel_event(message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        bot.reply_to(message, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /–æ—Ç–º–µ–Ω–∏—Ç—å_–∏–≤–µ–Ω—Ç <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    name = parts[1].lower()
    if name in events:
        del events[name]
        bot.reply_to(message, f"üõë –ò–≤–µ–Ω—Ç '{name}' –æ—Ç–º–µ–Ω—ë–Ω.")
    else:
        bot.reply_to(message, f"‚ùå –ò–≤–µ–Ω—Ç '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# –ö–æ–º–∞–Ω–¥–∞ /–¥–æ ‚Äî —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å
@bot.message_handler(commands=['–¥–æ'])
def time_left(message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        bot.reply_to(message, "‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /–¥–æ <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return
    name = parts[1].lower()
    if name not in events:
        bot.reply_to(message, f"‚ùå –ò–≤–µ–Ω—Ç '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    now = datetime.utcnow()
    event_time = events[name]["time"]
    delta = event_time - now
    if delta.total_seconds() > 0:
        days = delta.days
        hours, remainder = divmod(delta.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        bot.reply_to(message, f"‚ú® –î–æ '{name}' –æ—Å—Ç–∞–ª–æ—Å—å: {days}–¥ {hours:02}:{minutes:02}:{seconds:02}")
    else:
        bot.reply_to(message, f"üî• '{name}' —É–∂–µ –Ω–∞—á–∞–ª—Å—è!")

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â—å ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['–ø–æ–º–æ—â—å'])
def help_commands(message):
    text = (
        "ü§ñ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞:\n\n"
        "/—Å–æ–∑–¥–∞—Ç—å_–≥—Ä—É–ø–ø—É <–Ω–∞–∑–≤–∞–Ω–∏–µ> <@—É—á–∞—Å—Ç–Ω–∏–∫1 @—É—á–∞—Å—Ç–Ω–∏–∫2 ...> ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É\n"
        "/—Å–æ–∑–¥–∞—Ç—å_–∏–≤–µ–Ω—Ç <–Ω–∞–∑–≤–∞–Ω–∏–µ> <YYYY-MM-DD> <HH:MM> <—É—á–∞—Å—Ç–Ω–∏–∫–∏/–≥—Ä—É–ø–ø—ã/—Å–ª–æ–≤–æ '–≤—Å–µ'> ‚Äî —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
        "/–∏–≤–µ–Ω—Ç—ã ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n"
        "/–¥–æ <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ —Å–æ–±—ã—Ç–∏—è\n"
        "/–æ—Ç–º–µ–Ω–∏—Ç—å_–∏–≤–µ–Ω—Ç <–Ω–∞–∑–≤–∞–Ω–∏–µ> ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
        "/—Å–æ–∑—ã–≤ ‚Äî –æ–±—â–∏–π —Å–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤—Å–µ—Ö –≥—Ä—É–ø–ø\n"
        "/–ø–æ–º–æ—â—å ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    bot.reply_to(message, text)

bot.polling()
