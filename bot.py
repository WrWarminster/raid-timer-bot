import os
import telebot
from telebot import types
import threading
import time
from datetime import datetime, timedelta
from flask import Flask
import json

# ======== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ========
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
bot = telebot.TeleBot(BOT_TOKEN)

MOSCOW_OFFSET = 3  # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
ADMIN_USERNAME = "mrwarminster"  # –ê–¥–º–∏–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–≤–µ–Ω—Ç–æ–≤/–≥—Ä—É–ø–ø
GROUPS_FILE = "groups.json"

# ======== –ú–∏–Ω–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ========
app = Flask("")

@app.route("/")
def home():
    return "–ë–æ—Ç –∂–∏–≤–æ–π!"

def run_server():
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

threading.Thread(target=run_server, daemon=True).start()

# ======== –•—Ä–∞–Ω–∏–ª–∏—â–µ ========
events = {}
groups = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä—É–ø–ø
if os.path.exists(GROUPS_FILE):
    with open(GROUPS_FILE, "r", encoding="utf-8") as f:
        groups = json.load(f)

def save_groups():
    with open(GROUPS_FILE, "w", encoding="utf-8") as f:
        json.dump(groups, f, ensure_ascii=False, indent=2)

# ======== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ========
def back_markup():
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_menu"))
    markup.add(types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å", callback_data="close_message"))
    return markup

# ======== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π ========
def check_events():
    while True:
        now_utc = datetime.utcnow()
        for name, data in list(events.items()):
            event_time_utc = data["time_utc"]
            chat_id = data["chat_id"]
            notified = data["notified"]
            alerts = data["alerts"]
            members = data.get("members", [])

            for minutes_before in alerts:
                key = f"{minutes_before}m"
                if key not in notified:
                    delta = (event_time_utc - now_utc).total_seconds() / 60
                    if delta <= minutes_before:
                        if delta > 1440:
                            days = round(delta / 1440)
                            msg = f"‚öîÔ∏è –°–æ–±—ã—Ç–∏–µ '{name}' —Å—Ç–∞—Ä—Ç—É–µ—Ç —á–µ—Ä–µ–∑ {days} –¥–Ω –≤ {(event_time_utc + timedelta(hours=MOSCOW_OFFSET)).strftime('%H:%M')} –ú–°–ö!"
                        elif delta >= 60:
                            hours = round(delta / 60)
                            msg = f"‚öîÔ∏è –î–æ '{name}' –æ—Å—Ç–∞–ª–æ—Å—å {hours} —á–∞—Å(–∞/–æ–≤)!"
                        else:
                            msg = f"‚öîÔ∏è –î–æ '{name}' –æ—Å—Ç–∞–ª–æ—Å—å {int(delta)} –º–∏–Ω—É—Ç!"
                        member_str = " ".join(members) if members else ""
                        bot.send_message(chat_id, f"{msg} {member_str}")
                        notified.add(key)

            if event_time_utc <= now_utc < event_time_utc + timedelta(minutes=1) and "start" not in notified:
                member_str = " ".join(members) if members else ""
                bot.send_message(chat_id, f"üî• '{name}' –ù–ê–ß–ê–õ–°–Ø! {member_str} –ê–º–∏–Ω—å! (–í—Ä–µ–º—è: {(event_time_utc + timedelta(hours=MOSCOW_OFFSET)).strftime('%H:%M')} –ú–°–ö)")
                notified.add("start")

            if now_utc > event_time_utc + timedelta(hours=2):
                del events[name]
        time.sleep(30)

threading.Thread(target=check_events, daemon=True).start()

# ======== –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é ========
@bot.message_handler(commands=['start'])
def start_menu(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í—Å–µ –∏–≤–µ–Ω—Ç—ã", callback_data="show_events"))
    markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç", callback_data="create_event"))
    markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="create_group"))
    markup.add(types.InlineKeyboardButton("–í—Å–µ –≥—Ä—É–ø–ø—ã", callback_data="show_groups"))
    markup.add(types.InlineKeyboardButton("–û–±—â–∏–π —Å–±–æ—Ä", callback_data="general_call"))
    bot.send_message(message.chat.id, "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–≤–µ–Ω—Ç–∞–º–∏ –∏ –≥—Ä—É–ø–ø–∞–º–∏.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

# ======== –ö–æ–º–∞–Ω–¥–∞ /clear ========
@bot.message_handler(commands=['clear'])
def clear_events(message):
    username = message.from_user.username or ""
    if username.lower() != ADMIN_USERNAME.lower():
        bot.send_message(message.chat.id, f"‚ö†Ô∏è –î–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–≤–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @{ADMIN_USERNAME}")
        return
    events.clear()
    bot.send_message(message.chat.id, "‚úÖ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≤–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã.")

# ======== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ========
@bot.callback_query_handler(func=lambda call: True)
def universal_callback(call):
    username = call.from_user.username or ""

    if call.data == "back_to_menu":
        start_menu(call.message)
    elif call.data == "close_message":
        try:
            bot.delete_message(call.message.chat.id, call.message.message_id)
        except:
            pass
    else:
        handle_buttons(call)

def handle_buttons(call):
    username = call.from_user.username or ""

    if call.data == "show_events":
        if not events:
            bot.send_message(call.message.chat.id, "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤.")
            return
        markup = types.InlineKeyboardMarkup()
        for name in events.keys():
            markup.add(types.InlineKeyboardButton(name, callback_data=f"event_{name}"))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≤–µ–Ω—Ç:", reply_markup=markup)

    elif call.data == "create_event":
        if username.lower() != ADMIN_USERNAME.lower():
            bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–≤–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @{ADMIN_USERNAME}")
            return
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≤–µ–Ω—Ç–∞:")
        bot.register_next_step_handler(msg, step_event_name)

    elif call.data == "create_group":
        if username.lower() != ADMIN_USERNAME.lower():
            bot.send_message(call.message.chat.id, f"‚ö†Ô∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ @{ADMIN_USERNAME}")
            return
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:")
        bot.register_next_step_handler(msg, step_create_group)

    elif call.data == "show_groups":
        if not groups:
            bot.send_message(call.message.chat.id, "üì≠ –ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø.")
            return
        text = "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:\n"
        for gname, members in groups.items():
            text += f"- {gname}: {' '.join(members) if members else '–ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤'}\n"
        bot.send_message(call.message.chat.id, text)

    elif call.data == "general_call":
        all_members = []
        for members in groups.values():
            all_members.extend(members)
        member_str = ' '.join(all_members)
        if member_str:
            bot.send_message(call.message.chat.id, f"‚öîÔ∏è –û–±—â–∏–π —Å–±–æ—Ä! {member_str}, –≤—Å–µ –Ω–∞ —Å—Ç–∞—Ä—Ç! ‚è≥")
        else:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±—â–µ–≥–æ —Å–±–æ—Ä–∞.")

# ======== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ========
bot.infinity_polling()
