import os
import telebot
from telebot import types
import threading
import time
from datetime import datetime, timedelta
import pytz
from flask import Flask

# ======== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ========
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
bot = telebot.TeleBot(BOT_TOKEN)

# –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
tz = pytz.timezone("Europe/Moscow")

# ======== –ú–∏–Ω–∏-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ========
app = Flask("")

@app.route("/")
def home():
    return "–ë–æ—Ç –∂–∏–≤–æ–π!"

def run_server():
    port = int(os.environ.get("PORT", 8080))
    app.run(host="0.0.0.0", port=port)

threading.Thread(target=run_server, daemon=True).start()

# ======== –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≤–µ–Ω—Ç–æ–≤ ========
events = {}

# ======== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ========
def check_events():
    while True:
        now = datetime.now(tz)
        for name, data in list(events.items()):
            event_time = data["time"]
            chat_id = data["chat_id"]
            notified = data["notified"]
            alerts = data["alerts"]
            members = data.get("members", [])

            # –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            for minutes_before in alerts:
                key = f"{minutes_before}m"
                if key not in notified:
                    delta = (event_time - now).total_seconds() / 60
                    if delta <= minutes_before:
                        if delta > 1440:
                            days = round(delta / 1440)
                            msg = f"‚öîÔ∏è –°–æ–±—ã—Ç–∏–µ '{name}' —Å—Ç–∞—Ä—Ç—É–µ—Ç —á–µ—Ä–µ–∑ {days} –¥–Ω –≤ {event_time.strftime('%H:%M')} –ú–°–ö! –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å!"
                        elif delta >= 60:
                            hours = round(delta / 60)
                            msg = f"‚öîÔ∏è –î–æ '{name}' –æ—Å—Ç–∞–ª–æ—Å—å {hours} —á–∞—Å(–∞/–æ–≤)!"
                        else:
                            msg = f"‚öîÔ∏è –î–æ '{name}' –æ—Å—Ç–∞–ª–æ—Å—å {int(delta)} –º–∏–Ω—É—Ç!"
                        member_str = " ".join(members) if members else ""
                        bot.send_message(chat_id, f"{msg} {member_str}")
                        notified.add(key)

            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
            if event_time <= now < event_time + timedelta(minutes=1) and "start" not in notified:
                member_str = " ".join(members) if members else ""
                bot.send_message(chat_id, f"üî• '{name}' –ù–ê–ß–ê–õ–°–Ø! {member_str} –ê–º–∏–Ω—å! (–í—Ä–µ–º—è: {event_time.strftime('%H:%M')} –ú–°–ö)")
                notified.add("start")

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
            if now > event_time + timedelta(hours=2):
                del events[name]
        time.sleep(30)

threading.Thread(target=check_events, daemon=True).start()

# ======== –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é ========
@bot.message_handler(commands=['start'])
def start_menu(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í—Å–µ –∏–≤–µ–Ω—Ç—ã", callback_data="show_events"))
    markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∏–≤–µ–Ω—Ç", callback_data="create_event"))
    markup.add(types.InlineKeyboardButton("–û–±—â–∏–π —Å–±–æ—Ä", callback_data="general_call"))

    bot.send_message(message.chat.id, 
                     "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≤–µ–Ω—Ç–æ–≤ –≤ –≤–∞—à–µ–º —á–∞—Ç–µ!\n–° –Ω–∏–º –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–≤–µ–Ω—Ç—ã, –¥–æ–±–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –¥–µ–ª–∞—Ç—å –æ–±—â–∏–π —Å–±–æ—Ä.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                     reply_markup=markup)

# ======== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ========
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "show_events":
        if not events:
            bot.send_message(call.message.chat.id, "üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≤–µ–Ω—Ç–æ–≤.")
            return
        markup = types.InlineKeyboardMarkup()
        for name in events.keys():
            markup.add(types.InlineKeyboardButton(name, callback_data=f"event_{name}"))
        bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–≤–µ–Ω—Ç:", reply_markup=markup)

    elif call.data == "create_event":
        msg = bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–≤–µ–Ω—Ç–∞:")
        bot.register_next_step_handler(msg, step_event_name)

    elif call.data == "general_call":
        try:
            members = []
            for member in bot.get_chat_administrators(call.message.chat.id):
                if hasattr(member, "user") and member.user.username and "bot" not in member.user.username.lower():
                    members.append(f"@{member.user.username}")
            member_str = " ".join(members)
            if member_str:
                bot.send_message(call.message.chat.id, f"‚öîÔ∏è –û–±—â–∏–π —Å–±–æ—Ä! {member_str}, –≤—Å–µ –Ω–∞ —Å—Ç–∞—Ä—Ç! ‚è≥")
            else:
                bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –æ–±—â–µ–≥–æ —Å–±–æ—Ä–∞.")
        except:
            bot.send_message(call.message.chat.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞.")

# ======== –®–∞–≥–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–≤–µ–Ω—Ç–∞ ========
def step_event_name(message):
    event_name = message.text.lower()
    message.chat.event_name = event_name
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09.10.2025 18:00):")
    bot.register_next_step_handler(msg, step_event_datetime)

def step_event_datetime(message):
    try:
        dt = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        dt = tz.localize(dt)
        message.chat.event_time = dt
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (—á–µ—Ä–µ–∑ @username), —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö:")
        bot.register_next_step_handler(msg, step_event_members)
    except:
        msg = bot.send_message(message.chat.id, "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
        bot.register_next_step_handler(msg, step_event_datetime)

def step_event_members(message):
    members = message.text.split() if message.text.strip() else []
    event_name = message.chat.event_name
    event_time = message.chat.event_time
    events[event_name] = {
        "time": event_time,
        "chat_id": message.chat.id,
        "members": members,
        "notified": set(),
        "alerts": [10, 60, 300, 720, 1440, 2880]  # 10–º–∏–Ω,1—á,5—á,12—á,1–¥,2–¥
    }
    bot.send_message(message.chat.id, f"‚úÖ –ò–≤–µ–Ω—Ç '{event_name}' —Å–æ–∑–¥–∞–Ω –Ω–∞ {event_time.strftime('%d.%m.%Y %H:%M')} –ú–°–ö. –£—á–∞—Å—Ç–Ω–∏–∫–∏: {' '.join(members) if members else '–í—Å–µ'}")

# ======== –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ========
bot.infinity_polling()
